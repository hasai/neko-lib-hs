{-|
Module      : Module.Read
Description : Read module tests
Copyright   : (c) Petr Penzin, 2015
License     : BSD2
Maintainer  : penzin.dev@gmail.com
Stability   : stable
Portability : cross-platform

Binary read tests on Binary.Neko module level

-}
module Module.Read where

import Test.Tasty
import Test.Tasty.SmallCheck as SC
import Data.ByteString.Lazy as B
import Data.Binary.Get
import Data.Either

import Binary.Neko.Module
import Binary.Neko.Instructions
import Binary.Neko.Globals
import Binary.Neko.Hashtbl as H

dasmTests = testGroup "Disassemble tests"
  [ SC.testProperty "Disassemble hello world" $
      (readModule hello) == Right (N {globals=[GlobalString "Hello world!\n", GlobalVar ""], fields=H.fromStringList["print"], code=[AccGlobal 0, Push, AccBuiltin "print", Call 1]})
  , SC.testProperty "Disassemble empty bytestring" $
      isLeft(readModule $ pack []) -- particular error message is version specific
  , SC.testProperty "Invalid magic value" $
      (readModule $ pack [0x4f, 0x4b, 0x45, 0x4e, 0x02, 0x00, 0x00, 0x00]) == Left "Invalid magic value"
  , SC.testProperty "Too short to get globals" $
      isLeft(readModule $ pack [0x4e, 0x45, 0x4b, 0x4f, 0x02, 0x00]) -- particular error message is version specific
  , SC.testProperty "Too short to get fields" $
      isLeft(readModule $ pack [0x4e, 0x45, 0x4b, 0x4f, 0x02, 0x00, 0x00, 0x00,  0x01, 0x00]) -- particular error message is version specific
  , SC.testProperty "Too short to get code size" $
      isLeft(readModule $ pack [0x4e, 0x45, 0x4b, 0x4f, 0x02, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00, 0x07, 0x00]) -- particular error message is version specific
  , SC.testProperty "Invalid number of globals" $
      (readModule $ pack [0x4e, 0x45, 0x4b, 0x4f, 0xFF, 0xFF, 0xFF, 0xFF,  0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00])
                                                                  == Left "Number of globals not between 0 and 0xFFFF"
  , SC.testProperty "Invalid number of fields" $
      (readModule $ pack [0x4e, 0x45, 0x4b, 0x4f, 0x02, 0x00, 0x00, 0x00,  0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00])
                                                                  == Left "Number of fields not between 0 and 0xFFFF"
  , SC.testProperty "Invalid code size" $
      (readModule $ pack [0x4e, 0x45, 0x4b, 0x4f, 0x02, 0x00, 0x00, 0x00,  0x01, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF])
                                                                  == Left "Code size not between 0 and 0xFFFFFF"
  , SC.testProperty "Duplicate field" $
      (readModule $ pack [0x4e, 0x45, 0x4b, 0x4f, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x0d, 0x00, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x21, 0x0a, 0x01, 0x00, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x00, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x00])
                                                                  == Left "Duplicate field print"
  ]

hello = pack [
              0x4e, 0x45, 0x4b, 0x4f, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
              0x03, 0x0d, 0x00, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x21, 0x0a,
              0x01, 0x00, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x00, 0x31, 0x4c, 0x2f, 0x2d, 0x58, 0x8b, 0xc8, 0xad
             ]

